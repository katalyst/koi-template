#!/bin/bash

set -eu
set -o pipefail

CLUSTER="ecs-katalyst"
ENVIRONMENT="staging"
SERVICE="<%= @app_name %>"
COMMAND="/bin/bash"

function task_status {
  TASK_ARN="$1"
  aws ecs describe-tasks --cluster "$CLUSTER" --region "ap-southeast-2" --tasks "$TASK_ARN" --query tasks[].containers[].managedAgents[].lastStatus --output text
}

while getopts b:e:r:c option
do
    case "${option}" in
        e) ENVIRONMENT=${OPTARG};;
        *) exit 1;;
    esac
done

TASK_ARN=$(aws ecs run-task \
  --cluster "$CLUSTER" \
  --enable-execute-command \
  --task-definition "$SERVICE-$ENVIRONMENT-maintenance" \
  --network-configuration "awsvpcConfiguration={subnets=[subnet-0d11b1a1454181d4c,subnet-05bcadcac2d4e5979,subnet-054748b05595d8621],securityGroups=[sg-02793939997cd095d],assignPublicIp=ENABLED}" \
  --overrides '{ "containerOverrides": [ { "name": "maintenance", "command": ["/usr/bin/tail", "-f", "/dev/null"] } ] }' \
  --query tasks[].taskArn --output text) || true

TASK_ID=$(echo "$TASK_ARN" | cut -d '/' -f3)
echo "Launching task, please stand by for interactive shell"

function cleanup {
  aws ecs stop-task --cluster "$CLUSTER" --task "$TASK_ID" --region "ap-southeast-2" > /dev/null
  echo "Task stopped (${TASK_ID})"
}

trap cleanup EXIT

echo -n "Container launching"
while [ "$(task_status "$TASK_ID")" != "RUNNING" ]
do
  sleep 1
  echo -n "."
done

echo ""

aws ecs execute-command --cluster "$CLUSTER" --region "ap-southeast-2" --container maintenance --task "$TASK_ID" --interactive --command "$COMMAND"
