# This workflow will run when a release tag is created and pushed
name: Release to AWS ECR and deploy to staging

on:
  push:
    tags:
      - release/**
concurrency: continuous-deployment
env:
  ASSETS_BUCKET: ${{ vars.ASSETS_BUCKET }}
  AWS_DEFAULT_REGION: ap-southeast-2
  DOCKER_BUILDKIT: 1
  ECR: ${{ vars.ECR_URL }}
jobs:
  build:
    runs-on: ubuntu-latest-arm
    permissions:
      contents: read
      id-token: write
    steps:
      - name: "Get docker sanitised release tag"
        run: echo RELEASE_TAG=$(echo $GITHUB_REF_NAME | sed 's|/|-|g') >> $GITHUB_ENV
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-session-name: release
          role-to-assume: ${{ vars.ECR_ROLE }}
      - name: Find latest release version
        id: last_release
        run: >-
          echo previous_release_tag=$(
          aws ecr describe-images --repository-name=${{ vars.ECR_NAME }} --image-ids=imageTag=production |
          jq '.imageDetails[0].imageTags[] | select(startswith("release-"))' -r |
          sed 's|-|/|') >> $GITHUB_OUTPUT
      - name: Sign in docker to Amazon ECR
        run: >-
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} |
          docker login --username AWS --password-stdin ${ECR}
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Build ${{ github.ref_name }}"
        run: >-
          docker build
          --build-arg "APPLICATION_REVISION=${{ github.sha }}"
          --build-arg "APPLICATION_VERSION=${{ github.ref_name }}"
          --build-arg "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}"
          --build-arg "BUILDKIT_INLINE_CACHE=1"
          --build-arg "BUNDLER_VERSION=$(tail -n1 Gemfile.lock | xargs echo)"
          --build-arg "RUBY_VERSION=$(tail -n1 .ruby-version | xargs echo)"
          --build-arg "CDN_ASSET_PREFIX=${{ env.RELEASE_TAG }}"
          --build-arg "S3_ASSETS_BUCKET=${ASSETS_BUCKET}"
          --secret "id=aws-key-id,env=AWS_ACCESS_KEY_ID"
          --secret "id=aws-secret-key,env=AWS_SECRET_ACCESS_KEY"
          --secret "id=aws-session-token,env=AWS_SESSION_TOKEN"
          --tag "${ECR}:latest"
          --tag "${ECR}:${RELEASE_TAG}"
          --file Dockerfile
          .
      - name: "Push to ${{ vars.ECR_URL }}"
        run: |
          docker push -a ${ECR}
    outputs:
      previous_release_tag: ${{ steps.last_release.outputs.previous_release_tag }}
  deploy:
    needs: build
    runs-on: ubuntu-latest-arm
    environment: staging
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-session-name: deploy
          role-to-assume: ${{ vars.ECR_ROLE }}
      - name: Deploy to ${{ vars.ecs_service}}
        run: >-
          aws ecs update-service --cluster ${{ vars.ecs_cluster }}
          --service ${{ vars.ecs_service }}
          --force-new-deployment
          --region ${{ env.AWS_DEFAULT_REGION }}
  release:
    needs: build
    runs-on: ubuntu-latest-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create GitHub release
        run: >-
          PREVIOUS=${{ needs.build.outputs.previous_release_tag }};
          gh release create "${{github.ref_name}}"
          --verify-tag
          --generate-notes
          --prerelease
          $([ -n "$PREVIOUS" ] && echo --notes-start-tag $PREVIOUS)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
